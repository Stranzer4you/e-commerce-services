spring.application.name=e-commerce

server.servlet.context-path=/e-commerce/api/v1
server.port=9010


spring.datasource.url=jdbc:postgresql://localhost:5432/postgres
spring.datasource.username=postgres
spring.datasource.password=root
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.show-sql=true

spring.jpa.properties.hibernate.default_schema=e_commerce
spring.jpa.hibernate.naming.physical-strategy=com.ecommerceservice.config.NamingStrategyConfig

#kafka configuration
spring.kafka.bootstrap-servers=localhost:9092

# Kafka Producer Config
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer

# Kafka Consumer Config
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer

# Trusted package for consuming POJOs (optional)
spring.kafka.consumer.properties.spring.json.trusted.packages=*


# Optional for reliability
spring.kafka.producer.retries=3
spring.kafka.producer.acks=all
spring.kafka.producer.properties.enable.idempotence=true

# list of topics
kafka.inventory.update.topic=ecommerce.inventory.update
kafka.order.payment.initiated.topic=ecommerce.order.payment.initiated
kafka.order.status.updated.topic=ecommerce.order.status.updated
kafka.orders.created.topic=ecommerce.orders.created
kafka.payment.failed.topic=ecommerce.payment.failed
kafka.payment.pending.topic=ecommerce.payment.pending
kafka.payment.success.topic=ecommerce.payment.success
kafka.shipping.initiate.topic=ecommerce.shipping.initiate
kafka.shipping.status.topic=ecommerce.shipping.status


#app used variables
notification.type.ids=1,2,3

